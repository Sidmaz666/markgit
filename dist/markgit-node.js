(()=>{var e={450:(e,t,r)=>{const a=r(387);"undefined"!=typeof global&&void 0===global.btoa&&(global.btoa=function(e){return Buffer.from(e,"binary").toString("base64")}),"undefined"!=typeof global&&void 0===global.atob&&(global.atob=function(e){return Buffer.from(e,"base64").toString("binary")}),"undefined"!=typeof window&&void 0===window.btoa&&(window.btoa=function(e){return Buffer.from(e,"binary").toString("base64")}),"undefined"!=typeof window&&void 0===window.atob&&(window.atob=function(e){return Buffer.from(e,"base64").toString("binary")});const s=e=>{if("undefined"!=typeof btoa)return btoa(e);if("undefined"!=typeof Buffer)return Buffer.from(e,"binary").toString("base64");throw new Error("btoa is not available in this environment")},o=e=>{if("undefined"!=typeof atob)return atob(e);if("undefined"!=typeof Buffer)return Buffer.from(e,"base64").toString("binary");throw new Error("atob is not available in this environment")};async function n(e,t,r,o,n,i){let u="true";if(!n)return u="false",{status:u,error:"Token is required for write operations"};if(!/([a-zA-Z0-9\s_\\.\-:])+(.md)$/gi.test(r))return u="false",{status:u,error:"Only .md files are supported"};try{const l=`https://api.github.com/repos/${e}/${t}/contents/${r}`,d={Authorization:`token ${n}`};let c=null;try{c=(await a(l,{headers:d})).data.sha}catch(e){}const f={message:i||`Create ${r}`,content:s(o),...c&&{sha:c}},p=await a.put(l,f,{headers:d});return u="true",{status:u,message:c?"File updated successfully":"File created successfully",file:p.data.content}}catch(e){return u="false",{status:u,error:e.response?.data?.message||"Failed to create/update file"}}}e.exports={getList:async function(e,t,r="",s){let o="true";try{const n=`https://api.github.com/repos/${e}/${t}/contents/${r}`,i=s?{Authorization:`token ${s}`}:{},u=await a(n,{headers:i}),l=await u.data;let d=[];return l.forEach((e=>{"file"==e.type&&/([a-zA-Z0-9\s_\\.\-:])+(.md)$/gi.test(e.name)&&d.push(e.name)})),d.push({status:o}),d}catch(e){return o="false",{status:o,error:"Invalid user name or repo name"}}},getContent:async function(e,t,s,n){let i="true";if(!/([a-zA-Z0-9\s_\\.\-:])+(.md)$/gi.test(s))return i="false",{status:i,error:"Invalid File Path"};try{const u=r(35),l=r(761)({html:!0,linkify:!0,typographer:!0,breaks:!0,highlight:function(e,t){if(t&&u.getLanguage(t))try{return'<pre class="hljs custom-code-hljs-class"><code>'+u.highlight(e,{language:t,ignoreIllegals:!0}).value+"</code></pre>"}catch(e){}return'<pre class="hljs custom-code-hljs-class"><code>'+l.utils.escapeHtml(e)+"</code></pre>"}}).use(r(194)).use(r(726)).use(r(991)).use(r(27)).use(r(210)).use(r(727)).use(r(990)),d=`https://api.github.com/repos/${e}/${t}/contents/${s}`,c=n?{Authorization:`token ${n}`}:{},f=await a(d,{headers:c}),p=await f.data,h=l.render(o(p.content));return i="true",{status:i,content_markdown:o(p.content),content_html:h}}catch(e){return i="false",{status:i,error:"Invalid user name or repo name"}}},search:async function(e,t,r,s){let o="false";if(0==e.length||0==t.length||0==r.length)return o="false",{status:o,error:"Provide Valid Data!"};try{const n=`https://api.github.com/search/code?q=${e}+repo:${t}/${r}`,i=s?{Authorization:`token ${s}`}:{},u=await a(n,{headers:i}),l=await u.data,d=[],c=[];return l.total_count>0?(l.items.forEach((e=>{if(!/([a-zA-Z0-9\s_\\.\-:])+(.md)$/gi.test(e.name))return o="false",{status:o,error:"No Markdown File Found"};c.push({filename:e.name,file_path:e.path})})),o="true",d.push({status:o,total_count:c.length},c),d):(o="false",{status:o,error:"Nothing Found!"})}catch(e){return o="false",{status:o,error:"Invalid user name or repo name"}}},createFile:n,updateFile:async function(e,t,r,o,n,i){let u="true";if(!n)return u="false",{status:u,error:"Token is required for write operations"};if(!/([a-zA-Z0-9\s_\\.\-:])+(.md)$/gi.test(r))return u="false",{status:u,error:"Only .md files are supported"};try{const l=`https://api.github.com/repos/${e}/${t}/contents/${r}`,d={Authorization:`token ${n}`},c=(await a(l,{headers:d})).data.sha,f={message:i||`Update ${r}`,content:s(o),sha:c},p=await a.put(l,f,{headers:d});return u="true",{status:u,message:"File updated successfully",file:p.data.content}}catch(e){return u="false",{status:u,error:e.response?.data?.message||"Failed to update file"}}},deleteFile:async function(e,t,r,s,o){let n="true";if(!s)return n="false",{status:n,error:"Token is required for write operations"};try{const i=`https://api.github.com/repos/${e}/${t}/contents/${r}`,u={Authorization:`token ${s}`},l={message:o||`Delete ${r}`,sha:(await a(i,{headers:u})).data.sha};return await a.delete(i,{data:l,headers:u}),n="true",{status:n,message:"File deleted successfully"}}catch(e){return n="false",{status:n,error:e.response?.data?.message||"Failed to delete file"}}},createFolder:async function(e,t,r,a,s){let o="true";if(!a)return o="false",{status:o,error:"Token is required for write operations"};try{const o=r.endsWith("/")?`${r}.gitkeep`:`${r}/.gitkeep`,i=`# ${r}\n\nThis folder was created using MarkGit.`,u=await n(e,t,o,i,a,s||`Create folder ${r}`);return"true"===u.status?{status:"true",message:`Folder ${r} created successfully`,folder_path:r}:u}catch(e){return o="false",{status:o,error:e.message||"Failed to create folder"}}}}},387:e=>{"use strict";e.exports=require("axios")},35:e=>{"use strict";e.exports=require("highlight.js")},761:e=>{"use strict";e.exports=require("markdown-it")},726:e=>{"use strict";e.exports=require("markdown-it-deflist")},194:e=>{"use strict";e.exports=require("markdown-it-emoji")},990:e=>{"use strict";e.exports=require("markdown-it-footnote")},210:e=>{"use strict";e.exports=require("markdown-it-ins")},727:e=>{"use strict";e.exports=require("markdown-it-mark")},991:e=>{"use strict";e.exports=require("markdown-it-sub")},27:e=>{"use strict";e.exports=require("markdown-it-sup")}},t={},r=function r(a){var s=t[a];if(void 0!==s)return s.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}(450);module.exports=r})();