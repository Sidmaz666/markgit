import*as e from"highlight.js";import*as t from"markdown-it";import*as a from"markdown-it-deflist";import*as r from"markdown-it-emoji";import*as s from"markdown-it-footnote";import*as o from"markdown-it-ins";import*as n from"markdown-it-mark";import*as i from"markdown-it-sub";import*as u from"markdown-it-sup";import*as l from"axios";var p={0:t=>{t.exports=e},577:e=>{e.exports=t},167:e=>{e.exports=a},389:e=>{e.exports=r},989:e=>{e.exports=s},356:e=>{e.exports=o},305:e=>{e.exports=n},754:e=>{e.exports=i},278:e=>{e.exports=u}},f={};function d(e){var t=f[e];if(void 0!==t)return t.exports;var a=f[e]={exports:{}};return p[e](a,a.exports,d),a.exports}d.d=(e,t)=>{for(var a in t)d.o(t,a)&&!d.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},d.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var c={};(()=>{d.d(c,{cn:()=>p,L6:()=>m,ZP:()=>h,_I:()=>g,L5:()=>i,gp:()=>n,yC:()=>u,Dd:()=>f});const e=(t={default:()=>l.default},a={},d.d(a,t),a);var t,a;"undefined"!=typeof global&&void 0===global.btoa&&(global.btoa=function(e){return Buffer.from(e,"binary").toString("base64")}),"undefined"!=typeof global&&void 0===global.atob&&(global.atob=function(e){return Buffer.from(e,"base64").toString("binary")}),"undefined"!=typeof window&&void 0===window.btoa&&(window.btoa=function(e){return Buffer.from(e,"binary").toString("base64")}),"undefined"!=typeof window&&void 0===window.atob&&(window.atob=function(e){return Buffer.from(e,"base64").toString("binary")});const r=e=>{if("undefined"!=typeof btoa)return btoa(e);if("undefined"!=typeof Buffer)return Buffer.from(e,"binary").toString("base64");throw new Error("btoa is not available in this environment")},s=e=>{if("undefined"!=typeof atob)return atob(e);if("undefined"!=typeof Buffer)return Buffer.from(e,"base64").toString("binary");throw new Error("atob is not available in this environment")},o=e=>({jpg:"image/jpeg",jpeg:"image/jpeg",png:"image/png",gif:"image/gif",svg:"image/svg+xml",webp:"image/webp",bmp:"image/bmp",ico:"image/x-icon"}[e||""]||"application/octet-stream");async function n(t,a,r="",s){let o="true";try{const n=`https://api.github.com/repos/${t}/${a}/contents/${r}`,i=s?{Authorization:`token ${s}`}:{},u=await(0,e.default)(n,{headers:i}),l=await u.data;let p=[];return l.forEach((e=>{"file"==e.type&&/([a-zA-Z0-9\s_\\.\-:])+(\.(md|json|jpg|jpeg|png|gif|svg|webp|bmp|ico))$/gi.test(e.name)&&p.push(e.name)})),p.push({status:o}),p}catch(e){return o="false",{status:o,error:"Invalid user name or repo name"}}}async function i(t,a,r,n){let i="true";if(!/([a-zA-Z0-9\s_\\.\-:])+(\.(md|json|jpg|jpeg|png|gif|svg|webp|bmp|ico))$/gi.test(r))return i="false",{status:i,error:"Invalid File Path - Only .md, .json, and image files are supported"};try{const u=`https://api.github.com/repos/${t}/${a}/contents/${r}`,l=n?{Authorization:`token ${n}`}:{},p=await(0,e.default)(u,{headers:l}),f=await p.data,c=s(f.content);if(r.toLowerCase().endsWith(".md")){const e=d(0),t=d(577)({html:!0,linkify:!0,typographer:!0,breaks:!0,highlight:function(a,r){if(r&&e.getLanguage(r))try{return'<pre class="hljs custom-code-hljs-class"><code>'+e.highlight(a,{language:r,ignoreIllegals:!0}).value+"</code></pre>"}catch(e){}return'<pre class="hljs custom-code-hljs-class"><code>'+t.utils.escapeHtml(a)+"</code></pre>"}}).use(d(389)).use(d(167)).use(d(754)).use(d(278)).use(d(356)).use(d(305)).use(d(989)),a=t.render(c);return i="true",{status:i,content_raw:c,content_html:a,file_type:"markdown",file_name:r.split("/").pop()}}if(!r.toLowerCase().endsWith(".json")){const e=r.split(".").pop()?.toLowerCase(),t=o(e);return i="true",{status:i,content_raw:c,content_base64:f.content,file_type:"image",file_name:r.split("/").pop(),mime_type:t,download_url:f.download_url}}try{const e=JSON.parse(c);return i="true",{status:i,content_raw:c,content_json:e,file_type:"json",file_name:r.split("/").pop()}}catch(e){return i="false",{status:i,error:"Invalid JSON format"}}}catch(e){return i="false",{status:i,error:"Invalid user name or repo name"}}}async function u(t,a,r,s){let o="false";if(0==t.length||0==a.length||0==r.length)return o="false",{status:o,error:"Provide Valid Data!"};try{const n=`https://api.github.com/search/code?q=${t}+repo:${a}/${r}`,i=s?{Authorization:`token ${s}`}:{},u=await(0,e.default)(n,{headers:i}),l=await u.data,p=[],f=[];return l.total_count>0?(l.items.forEach((e=>{/([a-zA-Z0-9\s_\\.\-:])+(\.(md|json|jpg|jpeg|png|gif|svg|webp|bmp|ico))$/gi.test(e.name)&&f.push({filename:e.name,file_path:e.path})})),o="true",p.push({status:o,total_count:f.length},f),p):(o="false",{status:o,error:"Nothing Found!"})}catch(e){return o="false",{status:o,error:"Invalid user name or repo name"}}}async function p(t,a,s,o,n,i){let u="true";if(!n)return u="false",{status:u,error:"Token is required for write operations"};if(!/([a-zA-Z0-9\s_\\.\-:])+(\.(md|json|jpg|jpeg|png|gif|svg|webp|bmp|ico))$/gi.test(s))return u="false",{status:u,error:"Only .md, .json, and image files are supported"};try{const l=`https://api.github.com/repos/${t}/${a}/contents/${s}`,p={Authorization:`token ${n}`};let f=null;try{f=(await(0,e.default)(l,{headers:p})).data.sha}catch(e){}const d={message:i||`Create ${s}`,content:r(o),...f&&{sha:f}},c=await e.default.put(l,d,{headers:p});return u="true",{status:u,message:f?"File updated successfully":"File created successfully",file:c.data.content}}catch(e){return u="false",{status:u,error:e.response?.data?.message||"Failed to create/update file"}}}async function f(t,a,s,o,n,i){let u="true";if(!n)return u="false",{status:u,error:"Token is required for write operations"};if(!/([a-zA-Z0-9\s_\\.\-:])+(\.(md|json|jpg|jpeg|png|gif|svg|webp|bmp|ico))$/gi.test(s))return u="false",{status:u,error:"Only .md, .json, and image files are supported"};try{const l=`https://api.github.com/repos/${t}/${a}/contents/${s}`,p={Authorization:`token ${n}`},f=(await(0,e.default)(l,{headers:p})).data.sha,d={message:i||`Update ${s}`,content:r(o),sha:f},c=await e.default.put(l,d,{headers:p});return u="true",{status:u,message:"File updated successfully",file:c.data.content}}catch(e){return u="false",{status:u,error:e.response?.data?.message||"Failed to update file"}}}async function g(t,a,r,s,o){let n="true";if(!s)return n="false",{status:n,error:"Token is required for write operations"};try{const i=`https://api.github.com/repos/${t}/${a}/contents/${r}`,u={Authorization:`token ${s}`},l={message:o||`Delete ${r}`,sha:(await(0,e.default)(i,{headers:u})).data.sha};return await e.default.delete(i,{data:l,headers:u}),n="true",{status:n,message:"File deleted successfully"}}catch(e){return n="false",{status:n,error:e.response?.data?.message||"Failed to delete file"}}}async function m(e,t,a,r,s){let o="true";if(!r)return o="false",{status:o,error:"Token is required for write operations"};try{const o=a.endsWith("/")?`${a}.gitkeep`:`${a}/.gitkeep`,n=`# ${a}\n\nThis folder was created using MarkGit.`,i=await p(e,t,o,n,r,s||`Create folder ${a}`);return"true"===i.status?{status:"true",message:`Folder ${a} created successfully`,folder_path:a}:i}catch(e){return o="false",{status:o,error:e.message||"Failed to create folder"}}}const h={getList:n,getContent:i,search:u,createFile:p,updateFile:f,deleteFile:g,createFolder:m}})();var g=c.cn,m=c.L6,h=c.ZP,b=c._I,w=c.L5,y=c.gp,$=c.yC,j=c.Dd;export{g as createFile,m as createFolder,h as default,b as deleteFile,w as getContent,y as getList,$ as search,j as updateFile};